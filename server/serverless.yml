# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: luismr00
# "service" is the name of this project. This will also be added to your AWS resource names.
service: server

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}  # Default stage is 'dev'
  region: ${opt:region, 'us-east-1'}  # Default region is 'us-east-1'
  environment:
    NODE_ENV: ${env:NODE_ENV}
    PRODUCTION_DOMAIN: ${env:PRODUCTION_DOMAIN}
    COGNITO_REGION: ${env:COGNITO_REGION}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    JWT_SECRET: ${env:JWT_SECRET}
    SES_VERIFIED_EMAIL: ${env:SES_VERIFIED_EMAIL}
    SES_EMAIL_DOMAIN: ${env:SES_EMAIL_DOMAIN}
    VIDEOS_TABLE: ${env:VIDEOS_TABLE}

# Adding CORS headers and support for cookies
custom:
  serverless-offline:
    httpPort: 4000
  cors:
    dev:
      origin: http://localhost:8000
      allowCredentials: true
      headers:
        - Content-Type
        - Authorization
        - Set-Cookie
        - X-Requested-With
        - Cache-Control
    prod:
      origin: https://${env:PRODUCTION_DOMAIN}
      allowCredentials: true
      headers:
        - Content-Type
        - Authorization
        - Set-Cookie
        - X-Requested-With
        - Cache-Control

functions:
  auth:
    handler: lambdas/auth/authHandler.handler
    events:
      - http:
          path: auth/{proxy+}
          method: any
          cors:
            origin: ${self:custom.cors.${self:provider.stage}.origin}
            allowCredentials: ${self:custom.cors.${self:provider.stage}.allowCredentials}
            headers: ${self:custom.cors.${self:provider.stage}.headers}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:initiateAuth
        Resource: 
          - arn:aws:cognito-idp:us-east-1:902901837865:userpool/${env:COGNITO_USER_POOL_ID}

  users:
    handler: lambdas/users/userHandler.handler
    events:
      - http:
          path: user/{proxy+}
          method: any
          cors:
            origin: ${self:custom.cors.${self:provider.stage}.origin}
            allowCredentials: ${self:custom.cors.${self:provider.stage}.allowCredentials}
            headers: ${self:custom.cors.${self:provider.stage}.headers}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminSetUserPassword
          - cognito-idp:ForgotPassword
          - cognito-idp:ConfirmForgotPassword
          - cognito-idp:AdminUpdateUserAttributes
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminRemoveUserFromGroup
          - cognito-idp:AdminAddUserToGroup
          - ses:SendEmail
        Resource: 
          - arn:aws:cognito-idp:us-east-1:902901837865:userpool/${env:COGNITO_USER_POOL_ID}
          - arn:aws:ses:us-east-1:902901837865:identity/${env:SES_EMAIL_DOMAIN}
  
  videos:
    handler: lambdas/videos/videoHandler.handler
    events:
      - http:
          path: videos/{category}/{proxy+}
          method: any
          cors:
            origin: ${self:custom.cors.${self:provider.stage}.origin}
            allowCredentials: ${self:custom.cors.${self:provider.stage}.allowCredentials}
            headers: ${self:custom.cors.${self:provider.stage}.headers}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource: 
          - arn:aws:dynamodb:us-east-1:902901837865:table/${env:VIDEOS_TABLE}

package:
  include:
    - lambdas/middleware/**
    - lambdas/db/**
    - package-lock.json
    - package.json

  exclude:
    - node_modules/**
    - .gitignore
    - .git/**
    - .env
    - README.md
    - serverless.yml
    - .serverless/**
